% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reactor.R
\name{reactor}
\alias{reactor}
\alias{reactorUI}
\alias{reactorModule}
\alias{reactor_core}
\title{Reactor - a lite-GUI for R based in Shiny}
\usage{
reactorUI(namespace, layout = c("vertical", "horizontal"))

reactorModule(namespace = NULL, directory = NULL, envir = NULL)

reactor_core()
}
\arguments{
\item{namespace}{\emph{character string} Standard namespace convention for Shiny modules.This value
will be appended onto all UI ID's, so choose a namespace value that does not conflict with other
UI objects in your application.}

\item{layout}{\emph{character string} Whether the split between the UI (user interface) pane and the rendering pane should be
\code{vertical} or \code{horizontal}.  Default \code{vertical}.  Adjusting the split should
be useful in fitting \emph{reactor} to different UI layouts in Shiny applications.}

\item{directory}{\emph{character string} The directory where \emph{reactor} should save reports.  Default \code{NULL}
which will have \emph{reactor} generate a folder in the user's \emph{Documents} directory.}

\item{envir}{\emph{For advanced users} The environment where R scripts and reports should be evaluated.
Defaults to the primary server environment of the Shiny session, providing access to all session objects.
Other common options would be the current calling environment, \code{environment()} or the global environment
\code{globalenv()}. However, for most uses access to the server domain, activated through
the default entry, will be best.}
}
\value{
A reactor module, either UI or server
}
\description{
\emph{Reactor} provides users an ability to leverage and debug functions and objects
inside a Shiny application without using standard debugging functions like \code{browser()},
\code{debug()}, and breakpoints. \emph{Reactor} provides the ability to run both R and Markdown
code, save the code, and to generate reports in multiple formats.
}
\section{Functions}{

\describe{

 \item{reactorUI()}{The UI component, with variuos layout options}

 \item{reactorModule()}{Load the reactor server module}

 \item{reactor_core()}{A small Shiny app to demonstrate \emph{reactor}}

}
}

\examples{

## DO NOT RUN
library(shiny)
library(reactor)

# Define UI for application that draws a histogram
ui <- navbarPage(title = 'Reactor Test',
          tabPanel('Old Faithful',
             # Application title
             # Sidebar with a slider input for number of bins
             sidebarLayout(
                sidebarPanel(
                   sliderInput("bins",
                               "Number of bins:",
                               min = 1,
                               max = 50,
                               value = 30)
                ),
                # Show a plot of the generated distribution
                mainPanel(
                   titlePanel("Old Faithful Geyser Data"),
                   plotOutput("distPlot")
                )
             )
          ),
          tabPanel('Reactor', reactorUI('test'))
)

# Define server logic required to draw a histogram
server <- function(input, output) {

   data <- reactive({ faithful })

   output$distPlot <- renderPlot({
      # generate bins based on input$bins from ui.R
      x    <- data()[, 2]
      bins <- seq(min(x), max(x), length.out = input$bins + 1)

      # draw the histogram with the specified number of bins
      hist(x, breaks = bins, col = 'darkgray', border = 'white')
   })

   # need to pass in some data to avoid error of
   # reading objects from shinyoutput object not allowed
   r <- callModule(reactor, 'test')
}

# Run the application
shinyApp(ui = ui, server = server)

}
